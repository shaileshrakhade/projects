package com.util;

import java.io.File;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

public class Util {

	  public String autogenerate()
	    {
	        Calendar c = Calendar.getInstance();

	        
	        String hour = String.valueOf(c.get(Calendar.HOUR_OF_DAY)); // IF YOU USE HOUR IT WILL GIVE 12 HOUR USE HOUR_OF_DAY TO GET 24 HOUR FORMAT
	        String minutes = String.valueOf(c.get(Calendar.MINUTE));
	        String date = String.valueOf(c.get(Calendar.DATE));
	        String month = String.valueOf(c.get(Calendar.MONTH) + 1); // in java month starts from 0 not from 1 so for december 11+1 = 12
	        String year = String.valueOf(c.get(Calendar.YEAR)%100);
	        String autogeneratedno = year+month+date+hour+minutes;
	        
	        return autogeneratedno;
	    }
	    
	    public String getFileExtension(File file) {
	        String fileName = file.getName();
	        if(fileName.lastIndexOf(".") != -1 && fileName.lastIndexOf(".") != 0)
	        return fileName.substring(fileName.lastIndexOf(".")+1);
	        else return "";
	    }
	    
	    public String findDoctorById(int id)
	    {
	    	String name = "";
	    	Connection con;
	    	ResultSet rs;
			PreparedStatement pst;
			try
			{
				
				DriverManager.registerDriver(new org.postgresql.Driver());
				con = DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres?user=postgres&password=221822");
				
				pst = con.prepareStatement("select dname from hos.doctors where did=?;");
				pst.setInt(1, id);
			
				rs = pst.executeQuery();
				
				if(rs.next())
				{
					name = rs.getString(1);
				}
				con.close();
				rs.close();
				pst.close();
			}catch(Exception e)
			{
				e.printStackTrace();
			}
			return name;
	    }
	    
	    public int getAvgStars(int did)
	    {
	    	Double avg = 0.0;
	    	Connection con;
			ResultSet rs;
			PreparedStatement pst;
			try
			{
				//Class.forName("org.postgresql.Driver");
				DriverManager.registerDriver(new org.postgresql.Driver());
				con = DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres?user=postgres&password=221822");
				
				pst = con.prepareStatement("SELECT  did, avg(stars)" + 
						"	FROM hos.client_doctor" + 
						"	where stars is not null" + 
						"	group by did" + 
						"	having did=?;");
				pst.setInt(1, did);
				rs = pst.executeQuery();
				
				while(rs.next())
				{
					avg = rs.getDouble(2);
				}
				
				con.close();
				rs.close();
				pst.close();
			}catch(Exception e)
			{
				e.printStackTrace();
			}
			return (int)Math.round(avg);
	    }
	    
	    
	    public List<Reviews> getReviews(int did)
	    {
	    	ArrayList<Reviews> listReviews = new ArrayList<Reviews>();
	    	Connection con;
			ResultSet rs;
			PreparedStatement pst;
			try
			{
				//Class.forName("org.postgresql.Driver");
				DriverManager.registerDriver(new org.postgresql.Driver());
				con = DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres?user=postgres&password=221822");
				
				pst = con.prepareStatement("SELECT u.uname, cd.stars, cd.\"Comments\"" + 
											"	FROM hos.client_doctor as cd join hos.user as u" + 
											"	on cd.uid = u.uid" + 
											"	where cd.did = ? and cd.stars is not null and cd.\"Comments\" is not null;");
				pst.setInt(1, did);
				rs = pst.executeQuery();
				
				while(rs.next())
				{
					Reviews reviews = new Reviews();
					reviews.setUname(rs.getString(1));
					reviews.setStars(rs.getInt(2));
					reviews.setComment(rs.getString(3));
					
					
					listReviews.add(reviews);
				}
				
				con.close();
				rs.close();
				pst.close();
			}catch(Exception e)
			{
				e.printStackTrace();
			}	
			
			return listReviews;
	    }
	
}
